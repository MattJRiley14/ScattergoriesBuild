{"version":3,"sources":["letter/Letter.js","timer/Timer.js","categories/Categories.js","App.js","reportWebVitals.js","index.js"],"names":["Letter","useState","index","setIndex","letters","className","onClick","randomIndex","Math","floor","random","length","Timer","setHide","time","setTime","useEffect","setTimeout","alert","lists","num","categories","Categories","hide","list","setList","map","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0138202e.chunk.js","sourcesContent":["import './Letter.css'\nimport { useState } from 'react'\n\nconst Letter = () => {\n  const [index, setIndex] = useState(0);\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const changeLetter = () => {\n    const randomIndex = Math.floor(Math.random() * letters.length);\n    setIndex(randomIndex);\n  }\n  return(\n    <div className='Letter'>\n      <div className='Letter-Top'>\n        <p>LETTER</p>\n        <button onClick={changeLetter} className='Letter-Top-Btn'>Roll Again</button>\n      </div>\n      <div className='Letter-Display'>\n        <h1 className='Letter-Display-H1'>{letters[index]}</h1>\n      </div>\n    </div>\n  );\n}\nexport default Letter;","import { useEffect, useState } from 'react';\nimport './Timer.css'\n\nconst Timer = ({ setHide }) => {\n  const startingTime = 80;\n  const [time, setTime] = useState(startingTime);\n\n  // Function that begins the countdown and reveals the text/content for list items (AKA Categories)\n  const playGame = () => {\n    setTime(time - 1);\n    setHide(false);\n  }\n\n  // The function passed into the \"useEffect\" hook/function runs whenever the \"time\" state value is updated (NOTE: That also includes when the page first loads)\n  useEffect(() => {\n    // The code inside this if statement will NOT run when the value of the \"time\" state variable is equal to the amount of time (AKA Seconds) set as the starting amount for the countdown timer.\n    if(time !== startingTime){\n      // Since \"useEffect\" runs everytime the \"time\" state value is updated, a setTimeout is used to delay the number change by one second each time the \"time\" state value changes.\n      setTimeout(() => {\n        // Checking to make sure the time has not run out (AKA Checking to see if time is equal to zero)\n        if(time > 0){\n          // Updating the value for the \"time\" state variable which causes the \"Timer\" component to re-render and also causes the \"useEffect\" function to run.\n          setTime(time - 1);\n          // Code inside of the \"else\" will run when the time has run out (AKA When \"time\" is equal to zero)\n        } else {\n          // Updating the value for the \"time\" state variable by setting it back to the value for \"startingTime\" which causes the \"Timer\" component to re-render and also causes the \"useEffect\" function to run.\n          setTime(startingTime);\n          // Hides the text/content on all the categories (AKA List items) by adding the \".hide\" CSS class to all of them\n          setHide(true);\n          // The alert is inside another setTimeout so that it will NOT run/display before the text/content is hidden for the categories (AKA List items)\n          setTimeout(() => {\n            alert('TIME IS UP!!!');\n            // After the alert is complete (AKA The user clicks \"OK\") the categories (AKA List items) are shown again\n            setHide(false);\n          }, 100);\n        }\n      }, 1000);\n    }\n  }, [time]);\n\n  return(\n    <div className='Timer'>\n      <div className='Timer-Top'>\n        <p>TIMER</p>\n        <button onClick={playGame} className='Timer-Top-Btn'>PLAY</button>\n      </div>\n      <div className='Timer-Display'>\n        <h1 className='Timer-Display-H1'>{time}</h1>\n      </div>\n    </div>\n  );\n}\nexport default Timer;","import { useState } from 'react';\nimport './Categories.css'\n\nconst lists = [\n  {\n    num: 1,\n    categories: [\n      \"A Boy's Name\",\n      \"US Cities\",\n      \"Things That Are Cold\",\n      \"School Supplies\",\n      \"Pro Sports Teams\",\n      \"Insects\",\n      \"Breakfast Foods\",\n      \"Furniture\",\n      \"TV Shows\",\n      \"Things Found In The Ocean\",\n      \"Presidents\",\n      \"Product Names\"\n    ]\n  },\n  {\n    num: 2,\n    categories: [\n      \"Famous Females\",\n      \"Medicine/Drugs\",\n      \"Things Made Of Metal\",\n      \"Hobbies\",\n      \"People In Uniform\",\n      \"Things You Plug In\",\n      \"Animals\",\n      \"Languages\",\n      \"Names Used In The Bible\",\n      \"Junk Food\",\n      \"Things That Grow\",\n      \"Companies\"\n    ]\n  },\n  {\n    num: 3,\n    categories: [\n      \"Articles Of Clothing\",\n      \"Desserts\",\n      \"Car Parts\",\n      \"Things Found On A Map\",\n      \"Athletes\",\n      \"4-Letter Words\",\n      \"Items In A Refrigerator\",\n      \"Farm Animals\",\n      \"Street Names\",\n      \"Things At The Beach\",\n      \"Colors\",\n      \"Tools\"\n    ]\n  },\n  {\n    num: 4,\n    categories: [\n      \"Heros\",\n      \"Gifts/Presents\",\n      \"Terms Of Endearment\",\n      \"Kinds Of Dances\",\n      \"Things That Are Black\",\n      \"Vehicles\",\n      \"Tropical Locations\",\n      \"College Majors\",\n      \"Dairy Products\",\n      \"Things In A Souvenir Shop\",\n      \"Items In Your Purse/Wallet\",\n      \"World Records\"\n    ]\n  }\n];\n\nconst Categories = ({ hide, setHide }) => {\n  const [list, setList] = useState(0);\n\n  const nextList = () => {\n    // Checking if the final list is being displayed (AKA \"list\" is equal to the final index in the \"lists\" array)\n    if(list < lists.length - 1){\n      setList(list + 1);\n    } else {\n      // Displaying the first list again (AKA The list/object at the index of zero in the \"lists\" array)\n      setList(0);\n    }\n    // Hides the text/content for the categories (AKA List items) after a new list is displayed\n    setHide(true);\n  }\n\n  return(\n    <div className='Categories'>\n      <div className='Categories-Main'>\n        <div className=\"Categories-Main-Top\">\n          <h1>CATEGORIES</h1>\n          <h1>List {lists[list].num}</h1>\n        </div>\n        <ol className=\"Categories-Main-Display\">\n          {/* Using the Map method to create lis (AKA List items) using the categories for the current list. The current list is determind by the current value for the \"list\" state value. */}\n          {lists[list].categories.map(item => (\n            // Using the value for the \"hide\" state/props to determine whether the \".hide\" class will be applied to the lis (AKA List items)\n            <li className={hide ? 'hide' : null}>{item}</li>\n          ))}\n        </ol>\n      </div>\n      <div onClick={nextList} className=\"Categories-Secondary\">\n        <h1 className='Categories-Secondary-H1'>NEXT LIST</h1>\n      </div>\n    </div>\n  );\n}\nexport default Categories;","import './App.css';\nimport Letter from './letter/Letter'\nimport Timer from './timer/Timer';\nimport Categories from './categories/Categories';\nimport { useState } from 'react';\n\nfunction App() {\n  const [hide, setHide] = useState(true);\n\n  return (\n    <div className=\"App\">\n      <div className='App-Section-One'>\n        <Letter />\n        <Timer setHide={setHide} />\n      </div>\n      <div className='App-Section-Two'>\n        <Categories hide={hide} setHide={setHide} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}